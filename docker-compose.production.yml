volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}
  production_django_media: {}

  production_redis_data: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile

    image: spectrumx_visualization_platform_production_django
    volumes:
      - production_django_media:/app/spectrumx_visualization_platform/media
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start

  frontend:
    build:
      context: ./frontend
      dockerfile: ../compose/production/frontend/Dockerfile
    volumes:
      - ./frontend:/app
    depends_on:
      - django

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: spectrumx_visualization_platform_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ./.envs/.production/.postgres

  traefik:
    build:
      context: .
      dockerfile: ./compose/production/traefik/Dockerfile
    image: spectrumx_visualization_platform_production_traefik
    depends_on:
      - django
    volumes:
      - source: ./compose/production/traefik/data/certs
        target: /etc/traefik/certs
        type: bind
        read_only: true
      - source: ./compose/production/traefik/traefik.yml
        target: /etc/traefik/traefik.yml
        type: bind
        read_only: true
      - source: ./compose/production/traefik/credentials.htpasswd
        target: /etc/traefik/dashboard/credentials.htpasswd
        type: bind
        read_only: true
    ports:
      - '0.0.0.0:80:80'
      - '0.0.0.0:443:443'
      - '0.0.0.0:5555:5555'

  # whoami service to test traefik reachability
  # curl --insecure https://whoami.spectrumx.crc.nd.edu
  whoami:
    image: traefik/whoami
    command:
      - --port=2001 # must match port in traefik.yml
      # - --name=sds-01
    # networks:
    #     - sds-network-local

  redis:
    image: docker.io/redis:6

    volumes:
      - production_redis_data:/data

  celeryworker:
    <<: *django
    image: spectrumx_visualization_platform_production_celeryworker
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: spectrumx_visualization_platform_production_celerybeat
    command: /start-celerybeat

  flower:
    <<: *django
    image: spectrumx_visualization_platform_production_flower
    command: /start-flower

  nginx:
    build:
      context: .
      dockerfile: ./compose/production/nginx/Dockerfile
    image: spectrumx_visualization_platform_production_nginx
    depends_on:
      - django
    volumes:
      - production_django_media:/usr/share/nginx/media:ro
