global:
  checkNewVersion: true
  sendAnonymousUsage: false

# https://doc.traefik.io/traefik/operations/dashboard/
api:
  # e.g. curl --insecure https://localhost/dashboard/
  dashboard: true
  # insecure: true

providers:
  # https://doc.traefik.io/traefik/master/providers/file/
  file:
    filename: /etc/traefik/traefik.yml
    watch: true

accesslog:
  addInternals: true
  filters:
    minDuration: 10ms
    retryAttempts: true
    # statusCodes: '200,300-302' # switch to this if the one below is too verbose
    statusCodes: '200,300-302,400-404,500-504'

log:
  level: DEBUG

tls:
  certificates:
    - certFile: /etc/traefik/certs/public_key.crt
      keyFile: /etc/traefik/certs/private_key.pem
      stores:
        - default
  options:
    default:
      minVersion: VersionTLS12
  stores:
    # these self-signed certs will be used by default if let's encrypt
    #   fails due to e.g. the domain not being publicly reachable.
    # you might need --insecure flag in curl; and to manually bypass
    #   the browser's security warning if this is the case.
    default:
      defaultCertificate:
        certFile: /etc/traefik/certs/public_key.crt
        keyFile: /etc/traefik/certs/private_key.pem

entryPoints:
  web:
    # http
    address: ':80'
    http:
      # https://doc.traefik.io/traefik/routing/entrypoints/#entrypoint
      redirections:
        entryPoint:
          to: web-secure

  web-secure:
    # https
    address: ':443'
    asDefault: true
    http2:
      maxConcurrentStreams: 250

  flower:
    address: ':5555'

certificatesResolvers:
  letsencrypt:
    # https://doc.traefik.io/traefik/https/acme/#lets-encrypt
    acme:
      email: 'dpettifo@nd.edu'
      storage: /etc/traefik/acme/acme.json
      # https://doc.traefik.io/traefik/https/acme/#httpchallenge
      httpChallenge:
        entryPoint: web

http:
  routers:
    traefik-api:
      middlewares:
        - auth
      rule: 'Host(`spectrumx.crc.nd.edu`) && ( PathPrefix(`/dashboard`) )'
      service: api@internal
      tls:
        certResolver: letsencrypt

    web-secure-router:
      rule: 'Host(`spectrumx.crc.nd.edu`)'
      entryPoints:
        - web-secure
      service: frontend
      middlewares:
        - csrf
      tls:
        # https://doc.traefik.io/traefik/routing/routers/#certresolver
        certResolver: letsencrypt

    api-secure-router:
      rule: 'Host(`spectrumx.crc.nd.edu`) && ( PathPrefix(`/service`) )'
      entryPoints:
        - web-secure
      middlewares:
        - csrf
        - strip-prefix-service
      service: django
      tls:
        # https://doc.traefik.io/traefik/routing/routers/#certresolver
        certResolver: letsencrypt

    jupyterhub-secure-router:
      rule: 'Host(`spectrumx.crc.nd.edu`) && ( PathPrefix(`/notebook`) )'
      entryPoints:
        - web-secure
      middlewares:
        - csrf
      service: jupyterhub
      tls:
        # https://doc.traefik.io/traefik/routing/routers/#certresolver
        certResolver: letsencrypt

    flower-secure-router:
      rule: 'Host(`spectrumx.crc.nd.edu`) && ( PathPrefix(`/flower`) )'
      entryPoints:
        - flower
      service: flower
      tls:
        # https://doc.traefik.io/traefik/master/routing/routers/#certresolver
        certResolver: letsencrypt

    web-media-router:
      rule: 'Host(`spectrumx.crc.nd.edu`) && PathPrefix(`/media/`)'
      entryPoints:
        - web-secure
      middlewares:
        - csrf
      service: django-media
      tls:
        certResolver: letsencrypt

  middlewares:
    csrf:
      # https://doc.traefik.io/traefik/master/middlewares/http/headers/#hostsproxyheaders
      # https://docs.djangoproject.com/en/dev/ref/csrf/#ajax
      headers:
        hostsProxyHeaders: ['X-CSRFToken']
    auth:
      # This is a basic auth for the Traefik dashboard
      basicAuth:
        # Generate the credentials file with bcrypt hashes for the users:
        #     $ htpasswd -nB your-user-name >> traefik/credentials.htpasswd
        # Try it out:
        #     $ e.g. curl -u your-user-name:your-password http://your-sds-hostname/dashboard/
        # https://doc.traefik.io/traefik/middlewares/http/basicauth/#usersfile
        usersFile: /etc/traefik/dashboard/credentials.htpasswd
    strip-prefix-service:
      # https://doc.traefik.io/traefik/middlewares/striprefix/
      stripPrefix:
        prefixes:
          - /service

  services:
    # These must match the compose service name and port
    django:
      loadBalancer:
        servers:
          - url: http://django:5000

    frontend:
      loadBalancer:
        servers:
          - url: http://frontend:80

    flower:
      loadBalancer:
        servers:
          - url: http://flower:5555

    django-media:
      loadBalancer:
        servers:
          - url: http://nginx:80

    whoami:
      loadBalancer:
        servers:
          - url: http://whoami:2001

    jupyterhub:
      loadBalancer:
        servers:
          - url: http://jupyterhub:8000
